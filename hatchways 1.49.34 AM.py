# -*- coding: utf-8 -*-
"""hatchways.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1daVuxqygCRjkprLGfWVD2y0QW2Hfhvt1
"""

import csv
import sys
from collections import OrderedDict
import json

class Extract_data:
  
  def __init__(self,courses_file,students_file,tests_file,marks_file,output_file):
    self.returnDict = OrderedDict
    self.courses_file = courses_file
    self.test_file = tests_file
    self.students_file = students_file
    self.marks_file = marks_file
    self.output_file = output_file
    self.error_course = None
    self.error_id = None
    self.is_error = False


  def extract_courses(self,filename):
    courses = {}
    with open(filename) as f:
                reader = csv.DictReader(f)
                for dct in map(dict, reader):
                  courses[dct['id']] = {}
                  temp = {}
                  temp['name'] = dct['name']
                  temp['teacher'] = dct['teacher']
                  temp['test_ids'] = []
                  temp['test_weights'] = []
                  courses[dct['id']] = temp
    return courses

  def extract_tests(self,filename,courses):
    tests = {}
    with open(filename) as f:
            reader = csv.DictReader(f)
            for dct in map(dict, reader):
              #print(dct)
              tests[dct['id']] = {}
              tests[dct['id']]['course_id'] = dct['course_id']
              tests[dct['id']]['weight'] = dct['weight']
              courses[dct['course_id']]['test_ids'].append(dct['id'])
              courses[dct['course_id']]['test_weights'].append(int(dct['weight']))    

    return tests

  def extract_students(self,filename):
    students = {}
    with open(filename) as f:
            reader = csv.DictReader(f)
            for dct in map(dict, reader):
              temp = {}
              temp['courses'] = {}
              temp['name'] = dct['name']
              temp['id'] = dct['id']
              students[dct['id']] = temp

    return students

  def extract_marks(self,filename,students,test,courses):
    marks = {}
    with open(filename) as f:
            reader = csv.DictReader(f)
            for dct in map(dict, reader):
              #print(dct)
              test_id = dct['test_id']
              student_id = dct['student_id']
              course_id = test[dct['test_id']]['course_id']
              marks = dct['mark']
              weighted_marks = (int(tests[dct['test_id']]['weight'])*int(marks))/100

              if course_id not in students[student_id]['courses']:
                students[student_id]['courses'][course_id] = {}
                students[student_id]['courses'][course_id]['id'] = course_id
                students[student_id]['courses'][course_id]['name'] = courses[course_id]['name']
                students[student_id]['courses'][course_id]['teacher'] = courses[course_id]['teacher']
                students[student_id]['courses'][course_id]['scores'] = [weighted_marks]

              else:
                 students[student_id]['courses'][course_id]['scores'].append(weighted_marks)
    return students

  def check_test_weights(self,courses):
    for course_id, content in courses.items():
      weights_sum = sum(courses[course_id]['test_weights'])
      if weights_sum != 100:
        self.error_course = content['name']
        self.error_id = course_id
        self.is_error = True
        return False
    return True

  def calculate_student_scores(self,students):
    for student_id in students.keys():
      net_sum = 0
      for course_id in students[student_id]['courses'].keys():

        scores_average = sum(students[student_id]['courses'][course_id]['scores'])
        if scores_average > 100:
          students[student_id]['error_flag'] = True
          net_sum = 0
          break
        students[student_id]['error_flag'] = False
        students[student_id]['courses'][course_id]['course_average'] = round(scores_average,2)
        net_sum += round(scores_average,2)

      average_sum = net_sum / len(students[student_id]['courses'].keys())
      students[student_id]['total_average'] = round(average_sum,2)
      students[student_id]['courses'] = sorted(students[student_id]['courses'].items(),key=lambda x: x[1]['course_average'],reverse=True)
    return students

  def create_json_file(self,dataFrame):
    with open(self.output_file, 'w', encoding='utf8') as outfile:
      json.dump(dataFrame, outfile)

  def create_json_object(self,student_scores):
    from collections import OrderedDict
    newDict = OrderedDict()
    newDict['students'] = []
    for student_id in students:
        
        studentDict = OrderedDict()
        studentDict['id'] = students[student_id]['id']
        studentDict['name'] = students[student_id]['name']
        studentDict['totalAverage'] = students[student_id]['total_average']
        studentDict['courses'] = []
        for course_id, content in students[student_id]['courses']:
          courseDict = OrderedDict()
          courseDict['id'] = course_id
          courseDict['name'] = content['name']
          courseDict['teacher'] = content['teacher']
          courseDict['courseAverage'] = content['course_average']
          studentDict['courses'].append(courseDict)
        newDict['students'].append(studentDict)
    return newDict
      
  def run_extractor(self):
    courses = self.extract_courses(self.courses_file)
    tests = self.extract_tests(self.test_file,courses)
    if self.check_test_weights(courses) == False:
      dataFrame = {"error":"Invalid course weights"}
      self.create_json_file(dataFrame)
      return False
    students = self.extract_students(self.students_file)
    dataFrame = self.extract_marks(self.marks_file,students,tests,courses)
    student_scores = self.calculate_student_scores(dataFrame)
    json_object = self.create_json_object(student_scores)
    print(json_object)
    self.create_json_file(json_object)
    return True

  def run_program(self):
    if self.run_extractor():
      print("executed successfully !")
    else:
      print("execution Falield !")
      print("Error in the weights of the following course")
      print("Course Id: "+str(self.error_id))
      print("Course Name:"+str(self.error_course))



filenames = sys.argv[1:]
courses_file,students_file,tests_file,marks_file,output_file = filenames
extractor_object = Extract_data(courses_file,students_file,tests_file,marks_file,output_file)
extractor_object.run_program()